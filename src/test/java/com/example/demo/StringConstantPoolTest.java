package com.example.demo;

/**
 * xx类
 *
 * @Author chenqingdong
 * @Date 2021/4/9
 * @Version 1.0.0
 */
public class StringConstantPoolTest {

    public static void main(String[] args) {
//        ArrayList<Object> list = Lists.newArrayList();
//        while (true){
//            list.add(String.valueOf(System.currentTimeMillis()));
//        }
        System.out.println(Byte.MIN_VALUE);
        System.out.println(Byte.MAX_VALUE);
    }

    /**
     * 程序计数器是一块比较小的地址，可以看做是当前线程执行字节码的行号指示器，对于一个处理器同一时刻只会执行一条线程的一个指令，
     * 一条线程中有多个指令，为了线程切换可以恢复到正确执行位置，每个线程都要有一个程序计数器，它们互不干扰，是每个线程私有的
     * 是唯一一个在jvm中没有规定任何oom情况的区域
     */

    /**
     * 方法区包括类信息，常量，静态变量，方法区是jvm规范中的概念
     * 1.6方法区的实现是永久代
     * 1.7开始逐渐去永久代permGen space，将字符串常量池和静态变量移到堆中，方法区由永久代和堆实现（字符串常量和静态变量）
     * 1.8用元空间代替永久代，也就是方法区由元空间和堆实现（字符串常量和静态变量）metaspace
     */

    /**
     * 堆是jvm中最大的空间，new的对象都在堆中，也是垃圾回收的主要地方，oom一般都发生在这里
     * 年轻代 young space eden su
     */

    /**
     * 虚拟机栈   是线程私有的，也就是我们平时所说的栈，每一个方法的调用就是一个
     * 是由一个个栈帧组成的，每一个栈帧包括局部变量表、操作栈、动态链接、方法出口等信息
     *
     * 栈描述的是java方法执行的内存模型，每个方法被执行时都会创建一个栈帧用来存储局部变量表，操作栈，动态链接，方法出口等信息
     * 每个方法被调用的过程就是栈帧在虚拟机栈中入栈和出栈的过程（栈先入后出）
     * 平时所说的栈一般指的是局部变量表部分
     *
     * 局部变量表所需的内存空间是在编译器分配完成的，当进入一个方法，这个方法在栈中占用的内存空间是完全确定的，在运行期不会改变局部变量表的大小
     *
     *
     */

    /**
     * 本地方法栈
     */

    /**
     * hotspot虚拟机
     * 八大基本数据类型  byte   short   int     long    float   double      char    boolean
     *   所占字节数      1       2       4       8       4       8           2       -
     *   所占位数       8       16      32      64      32      64          2       -
     */

    /**
     *
     *
     * 虚拟机栈 每一个方法的执行过程就是栈帧被虚拟机栈入栈和出栈的过程，每个方法都是一个栈帧，包括局部变量表，操作栈，动态链接，方法出口等信息
     *
     *  线程调用方法的过程就是入栈和出栈（先入后出），通常我们所说的栈是局部变量表，包括局部变量，方法参数，ref
     *
     *
     */


    /**
     *方法区，堆
     * 程序计数器、虚拟机栈、本地方法栈   线程私有
     *
     * 程序计数器：是java内存中比较小的一块区域，可以看做是当前线程执行字节码的行号指示器，对于一个处理器在同一个时刻只能执行一个线程的一个指令
     * ，一个线程有多个指令，为了线程切换后可以恢复到正确执行位置，每个线程都要有一个程序计数器，他们互不干扰，是每个线程私有的，程序计数器是jvm内存中唯一没有oom的区域
     * 虚拟机栈：
     *
     */

}
